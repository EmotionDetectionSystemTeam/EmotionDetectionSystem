// <auto-generated />
using System;
using EmotionDetectionSystem.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmotionDetectionSystem.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240720090147_Initcreate")]
    partial class Initcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("EmotionDetectionSystem.DomainLayer.objects.EmotionData", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnrollmentSummaryLessonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnrollmentSummaryStudentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("WinningEmotion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentSummaryLessonId", "EnrollmentSummaryStudentId");

                    b.ToTable("EmotionData");
                });

            modelBuilder.Entity("EmotionDetectionSystem.DomainLayer.objects.Lesson", b =>
                {
                    b.Property<string>("LessonId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("EmotionDetectionSystem.DomainLayer.objects.User", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Email");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EnrollmentSummary", b =>
                {
                    b.Property<string>("LessonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherApproach")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("LessonId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("EnrollmentSummary");
                });

            modelBuilder.Entity("EmotionDetectionSystem.DomainLayer.objects.Student", b =>
                {
                    b.HasBaseType("EmotionDetectionSystem.DomainLayer.objects.User");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("EmotionDetectionSystem.DomainLayer.objects.Teacher", b =>
                {
                    b.HasBaseType("EmotionDetectionSystem.DomainLayer.objects.User");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("EmotionDetectionSystem.DomainLayer.objects.EmotionData", b =>
                {
                    b.HasOne("EnrollmentSummary", null)
                        .WithMany("EmotionData")
                        .HasForeignKey("EnrollmentSummaryLessonId", "EnrollmentSummaryStudentId");
                });

            modelBuilder.Entity("EmotionDetectionSystem.DomainLayer.objects.Lesson", b =>
                {
                    b.HasOne("EmotionDetectionSystem.DomainLayer.objects.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EnrollmentSummary", b =>
                {
                    b.HasOne("EmotionDetectionSystem.DomainLayer.objects.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmotionDetectionSystem.DomainLayer.objects.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EnrollmentSummary", b =>
                {
                    b.Navigation("EmotionData");
                });

            modelBuilder.Entity("EmotionDetectionSystem.DomainLayer.objects.Teacher", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
